# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-, Asial Corporation
# This file is distributed under the same license as the Monaca package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monaca 1.0\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/sampleapp/index.rst:3
msgid "Samples & Tips"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:5
msgid "AdMob Demo"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:8
msgid "In this page, we will show how to integrate Monaca with the most common mobile ads network called, `AdMob <https://www.google.com/admob/>`_. This sample app is based on a demo on `AdMob Plugin Pro on Github <https://github.com/floatinghotpot/cordova-admob-pro>`_."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:14
msgid "Banner Ads"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:20
msgid "Interstitial Ads"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:24
msgid ":download:`Click here to download the project <download/admob.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:28
#: ../doc/sampleapp/samples/backend_memo.rst:25
#: ../doc/sampleapp/samples/facebook.rst:25
#: ../doc/sampleapp/samples/ibeacon.rst:29
#: ../doc/sampleapp/samples/twitter.rst:25
msgid "Prerequisite"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:30
msgid "In this demo, we are using AdMob's ad unit ids for testing only. If you want to use the ads with your real application, you are required to register your application with AdMob."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:32
msgid "In order to register your application with AdMob, please do as follows:"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:34
msgid "Sign up with `AdMob <https://apps.admob.com>`_."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:36
msgid "Go to :guilabel:`MONETIZE` tab and click :guilabel:`+ MONETIZE NEW APP` button."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:38
msgid "Then, fill in the necessary information such your app name, platform and type of ads. After completed, your will get an ad id for each ad unit. You will need to use this id to call each ad in your application. Here is an example:"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:56
#: ../doc/sampleapp/samples/age-calc.rst:28
#: ../doc/sampleapp/samples/backend_memo.rst:44
#: ../doc/sampleapp/samples/break_the_bricks.rst:27
#: ../doc/sampleapp/samples/clock.rst:27
#: ../doc/sampleapp/samples/facebook.rst:54
#: ../doc/sampleapp/samples/flickr.rst:24
#: ../doc/sampleapp/samples/hello_world.rst:26
#: ../doc/sampleapp/samples/ibeacon.rst:41
#: ../doc/sampleapp/samples/memo_application.rst:26
#: ../doc/sampleapp/samples/minimum_project.rst:26
#: ../doc/sampleapp/samples/omikuji.rst:25
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:26
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:25
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:25
#: ../doc/sampleapp/samples/sample_rss_reader.rst:26
#: ../doc/sampleapp/samples/shinkansen.rst:24
#: ../doc/sampleapp/samples/todo.rst:25
#: ../doc/sampleapp/samples/twitter.rst:51
msgid "File Components"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:65
#: ../doc/sampleapp/samples/age-calc.rst:35
#: ../doc/sampleapp/samples/backend_memo.rst:51
#: ../doc/sampleapp/samples/break_the_bricks.rst:34
#: ../doc/sampleapp/samples/clock.rst:34
#: ../doc/sampleapp/samples/facebook.rst:61
#: ../doc/sampleapp/samples/flickr.rst:31
#: ../doc/sampleapp/samples/hello_world.rst:34
#: ../doc/sampleapp/samples/ibeacon.rst:48
#: ../doc/sampleapp/samples/memo_application.rst:33
#: ../doc/sampleapp/samples/minimum_project.rst:35
#: ../doc/sampleapp/samples/omikuji.rst:32
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:33
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:32
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:32
#: ../doc/sampleapp/samples/sample_rss_reader.rst:33
#: ../doc/sampleapp/samples/shinkansen.rst:31
#: ../doc/sampleapp/samples/todo.rst:32
#: ../doc/sampleapp/samples/twitter.rst:58
msgid "``index.html``"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:65
#: ../doc/sampleapp/samples/age-calc.rst:35
#: ../doc/sampleapp/samples/todo.rst:32
msgid "The startup Page"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:67
#: ../doc/sampleapp/samples/backend_memo.rst:52
#: ../doc/sampleapp/samples/clock.rst:36
#: ../doc/sampleapp/samples/facebook.rst:71
#: ../doc/sampleapp/samples/ibeacon.rst:54
#: ../doc/sampleapp/samples/memo_application.rst:37
#: ../doc/sampleapp/samples/todo.rst:34
msgid "``js/app.js``"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:67
msgid "JavaScript file handling app execution."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:69
#: ../doc/sampleapp/samples/age-calc.rst:37
#: ../doc/sampleapp/samples/break_the_bricks.rst:38
#: ../doc/sampleapp/samples/clock.rst:38
#: ../doc/sampleapp/samples/flickr.rst:32
#: ../doc/sampleapp/samples/hello_world.rst:42
#: ../doc/sampleapp/samples/ibeacon.rst:56
#: ../doc/sampleapp/samples/minimum_project.rst:36
#: ../doc/sampleapp/samples/sample_rss_reader.rst:43
#: ../doc/sampleapp/samples/shinkansen.rst:32
msgid "``css/style.css``"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:69
#: ../doc/sampleapp/samples/twitter.rst:59
msgid "A stylesheet file for the application"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:73
#: ../doc/sampleapp/samples/age-calc.rst:41
#: ../doc/sampleapp/samples/backend_memo.rst:56
#: ../doc/sampleapp/samples/break_the_bricks.rst:46
#: ../doc/sampleapp/samples/facebook.rst:77
#: ../doc/sampleapp/samples/flickr.rst:40
#: ../doc/sampleapp/samples/hello_world.rst:48
#: ../doc/sampleapp/samples/ibeacon.rst:60
#: ../doc/sampleapp/samples/memo_application.rst:41
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:40
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:41
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:42
#: ../doc/sampleapp/samples/sample_rss_reader.rst:47
#: ../doc/sampleapp/samples/shinkansen.rst:38
#: ../doc/sampleapp/samples/todo.rst:38
#: ../doc/sampleapp/samples/twitter.rst:66
msgid "Required JS/CSS Components"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:76
#: ../doc/sampleapp/samples/age-calc.rst:44
#: ../doc/sampleapp/samples/facebook.rst:80
#: ../doc/sampleapp/samples/flickr.rst:43
#: ../doc/sampleapp/samples/hello_world.rst:51
#: ../doc/sampleapp/samples/memo_application.rst:44
#: ../doc/sampleapp/samples/sample_rss_reader.rst:50
#: ../doc/sampleapp/samples/twitter.rst:69
msgid "``jQuery``"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:77
msgid "``Onsen``"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:81
#: ../doc/sampleapp/samples/facebook.rst:85
#: ../doc/sampleapp/samples/ibeacon.rst:67
#: ../doc/sampleapp/samples/sample_rss_reader.rst:54
#: ../doc/sampleapp/samples/twitter.rst:73
msgid "Required Cordova Plugins"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:84
msgid "`AdMob Plugin Pro <https://github.com/floatinghotpot/cordova-admob-pro>`_"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:90
#: ../doc/sampleapp/samples/age-calc.rst:49
#: ../doc/sampleapp/samples/backend_memo.rst:65
#: ../doc/sampleapp/samples/clock.rst:45
#: ../doc/sampleapp/samples/facebook.rst:93
#: ../doc/sampleapp/samples/flickr.rst:47
#: ../doc/sampleapp/samples/hello_world.rst:56
#: ../doc/sampleapp/samples/ibeacon.rst:76
#: ../doc/sampleapp/samples/memo_application.rst:50
#: ../doc/sampleapp/samples/minimum_project.rst:41
#: ../doc/sampleapp/samples/omikuji.rst:38
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:47
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:48
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:50
#: ../doc/sampleapp/samples/sample_rss_reader.rst:62
#: ../doc/sampleapp/samples/shinkansen.rst:46
#: ../doc/sampleapp/samples/todo.rst:46
#: ../doc/sampleapp/samples/twitter.rst:81
msgid "HTML Explanation"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:92
msgid "In this demo app, we use `Onsen <https://onsen.io/>`_ for the UI of the app."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:95
msgid "Startup Page"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:97
msgid "The following block code represents the UI of the startup page of the project."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:154
msgid "Ads Size Dialog"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:156
msgid "The following block code represents the Ads Size dialog allowing users to select various types of AdMob's ads size such as ``SMART_BANNER``, ``MEDIUM_RECTANGLE``, ``FULL_BANNER`` and so on."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:202
msgid "Ads Position Dialog"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:204
msgid "The following block code represents the Ads Position dialog allowing users to select various positions to place the ads such as ``TOP_LEFT``, ``CENTER``, ``BOTTOM_RIGHT`` and so on."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:262
#: ../doc/sampleapp/samples/age-calc.rst:79
#: ../doc/sampleapp/samples/backend_memo.rst:188
#: ../doc/sampleapp/samples/clock.rst:76
#: ../doc/sampleapp/samples/facebook.rst:179
#: ../doc/sampleapp/samples/flickr.rst:66
#: ../doc/sampleapp/samples/hello_world.rst:99
#: ../doc/sampleapp/samples/ibeacon.rst:157
#: ../doc/sampleapp/samples/memo_application.rst:134
#: ../doc/sampleapp/samples/omikuji.rst:75
#: ../doc/sampleapp/samples/sample_rss_reader.rst:73
#: ../doc/sampleapp/samples/shinkansen.rst:58
#: ../doc/sampleapp/samples/todo.rst:62
#: ../doc/sampleapp/samples/twitter.rst:155
msgid "JavaScript Explanation"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:264
msgid "In this section, we will explain some important functions (in ``app.js`` file) used in this sample app."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:267
msgid "admobid Object"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:269
msgid "From the very beginning, we start by initializing ``admobid`` object. The following block code initializes the object based on the device's platform. The object contains two types of ads such as banner and interstitial ads."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:292
msgid "All of these ad unit ids are for testing only. For the ad unit ids, you will need to register with AdMob and create your own ad unit ids there."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:295
msgid "initialization() Function"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:297
msgid "Once Cordova and AdMob plugin pro are completely loaded, ``initialization()`` Function will be called. In this function, several other functions are called such as:"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:299
msgid "``AdMob.getAdSettings()``: logging AdMob's ads setting information."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:300
msgid "``AdMob.setOptions()``: setting AdMob's ads setting such as positon, bgColor and so on."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:301
msgid "``onAdFailLoad`` event handler: displaying error information when the ad is failed to load."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:363
msgid "createSelectedBanner() Function"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:365
msgid "This function creates an ad based on the configuration."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:384
msgid "showBannerAtPosition() Function"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:386
msgid "This function shows the ad based on the selected ad's position."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:397
msgid "prepareInt() Function"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:399
msgid "This function prepares an interstitial ad and then shows it once it's ready."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:412
msgid "showBannerSize() Function"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:414
msgid "This function shows a Banner Size dialog (`OnsenUI dialog <https://onsen.io/v1/reference/ons-dialog.html>`_). Various types of ads size can be selected such as BANNER, SMART_BANNER, MEDIUM_RECTANGLE and so on. For more information, please refer to `Banner Size <https://firebase.google.com/docs/admob/android/banner>`_."
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:438
msgid "showBannerPos() Function"
msgstr ""

#: ../doc/sampleapp/samples/admob.rst:440
msgid "This function shows a Ad's Position dialog (`OnsenUI dialog <https://onsen.io/v1/reference/ons-dialog.html>`_)."
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:5
msgid "BirthYear App"
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:10
msgid "This sample application is a reprint of an article first featured on Think I­T on the 12/26/2012."
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:12
msgid "The app will calculate a user's birthyear and display it after he/she entered his/her name and age."
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:15
#: ../doc/sampleapp/samples/clock.rst:14
#: ../doc/sampleapp/samples/hello_world.rst:13
#: ../doc/sampleapp/samples/memo_application.rst:13
#: ../doc/sampleapp/samples/minimum_project.rst:13
#: ../doc/sampleapp/samples/omikuji.rst:13
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:13
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:12
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:13
#: ../doc/sampleapp/samples/sample_rss_reader.rst:13
#: ../doc/sampleapp/samples/todo.rst:13
msgid "*Tested Environments:* Android 4.2.2, iOS 7.1.1"
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:25
msgid ":download:`Click here to download the project <download/age-calc.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:37
msgid "The stylesheet used in the application"
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:51
msgid "The following contents of the HTML body of :file:`index.html` file is for displaying 2 textboxes for the user to input his/her name and age, and a button to calculate his/her birthyear. (see screenshot below):"
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:81
msgid "This code creates a function called ``calculate``."
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:83
msgid "After entering your age and name, it stores them in two variables called \"myname\" and \"myage\" respectively. It then goes on to calculate your birth year based on today's date, and stores it in a variable called \"birthyear\"."
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:85
msgid "Finally it stores the message contents in a variable called \"text\", calls the \"navigator.notification.alert\" function and displays the result as a popup."
msgstr ""

#: ../doc/sampleapp/samples/age-calc.rst:87
msgid "The ``navigator.notification.alert`` function  is a Core Cordova Plugins function that displays a popup dialog box on the screen. The third argument displays the text \"Welcome to Monaca!\" as the title of the dialog box."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:5
msgid "Backend Memo"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:9
msgid "This sample app allows user to create a memo app using Monaca Backend API."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:11
#: ../doc/sampleapp/samples/flickr.rst:12
msgid "*Tested Environments:* Android 4.1.1, iOS 7.1.1"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:22
msgid ":download:`Click here to download the project <download/backend_memo.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:27
msgid "You need to set-up a new backend and attach it to the project. After creating a new project, please follow :ref:`cloud_ide_adding_backend` for detailed instruction."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:29
msgid "After you have created a new backend, please create a new ``Memo`` collection as follows:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:34
msgid "Please check :guilabel:`Allow JavaScript API to insert data`. :guilabel:`Read` and :guilabel:`Write` options must not be selected."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:37
msgid "For more details on how to create Backend, please read :doc:`../../manual/backend/control_panel`"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:40
msgid "In order to access Backend API, you need to register ``cloud.monaca.mobi`` in the whitelist by editing each OSs configuration file. For more details, please refer to :ref:`Access Origin (Android) <access_origin_android>` and :ref:`Access Origin (iOS) <access_origin>`."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:51
#: ../doc/sampleapp/samples/clock.rst:34
#: ../doc/sampleapp/samples/hello_world.rst:34
#: ../doc/sampleapp/samples/minimum_project.rst:35
msgid "The Startup page"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:52
msgid "JavaScript file handling the interaction of the application"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:59
#: ../doc/sampleapp/samples/shinkansen.rst:41
#: ../doc/sampleapp/samples/todo.rst:41
msgid "``jQuerymobile``"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:67
msgid "For the User Interface of this sample app, we use jQuery Mobile. In jQuery Mobile, multiple pages can be integrated to a single HTML file. In this app, for example, both login screen and register screen are defined within :file:`index.html`. Specifically, pages are expressed by ``div`` tags in which the ``data-role`` attribute is set to ``page``. The role of the tags is expressed by the ``data-role`` attribute in this manner. For example, ``data-role`` can also specify as ``header``, ``content`` , or ``listview``. For more information on jQuery Mobile tags and components, please refer to `jQuery Mobile Demo <http://jquerymobile.com/demos/1.2.0/>`_."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:69
#: ../doc/sampleapp/samples/backend_memo.rst:101
msgid "The following contents of the HTML body:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:93
msgid "is corresponding to this screenshot which allows a user to login to Monaca Memo app if the user has already registered with the app:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:122
msgid "is corresponding to this screenshot which allows a new user to register with the Monaca Memo app:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:128
msgid "Likewise, there are several other pages defined in this HTML. Here are the screenshots of those pages."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:134
msgid "List Page"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:140
msgid "Confirm Logout Message"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:146
msgid "Confirm Delete Message"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:154
msgid "Add Page"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:160
msgid "Successful Adding Message"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:168
msgid "View Memo"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:176
msgid "Edit Page"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:182
msgid "Successful Updating Message"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:190
msgid "There are 7 main functionalities in the JavaScript code of this app which are *Login*, *Logout*, *Register*, *Adding Memo*, *Editing Memo*, *Deleting Memo* and *Viewing Memo* functions."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:193
msgid "Register a New User"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:195
msgid "``onRegisterBtn()`` is called when a user clicks on :guilabel:`Register` button in the *Register Page*. Then, both ``email`` and ``password`` from the input boxes are captured and used to call ``monaca.cloud.User.register()`` function. This function is used to register a new user to Monaca Backend. If the registration is successful, the user will be automatically logged-in. Below is the JavaScript code to register a user:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:218
msgid "Login a User and Get Collection Data"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:220
msgid "``onLoginBtn()`` is called when a user clicks on :guilabel:`Login` button. In this function, a Monaca Backend API called ``monaca.cloud.User.login()`` is used to login an existing user. If the user is found in the Monaca Backend, the user is redirected to the list page which displays a list of memo of the currently logged-in user by calling ``getMemoList()`` function. Inside ``getMemoList()`` function, a list of memo of currently logged-in users is retrieved by using ``monaca.cloud.Collection().findMine()`` function. In this example, we assume that you have already created a collection named ``Memo``. The memo is then dynamically added into the ``TopListView`` in the list page. Below is the JavaScript code of the these functions:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:272
msgid "As a result, the list page like the one below will be displayed:"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:280
msgid "Logout a User"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:282
msgid "``monaca.cloud.User.logout()`` function is used to logout the currently logged-in user. If the user is successfully logged out, the user will be redirected to the login page."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:302
msgid "Adding a Memo"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:304
msgid "``onSaveBtn()`` is called when a user clicks on :guilabel:`Save` button in the add page. Then, both ``title`` and ``content`` of a new memo from the input boxes are captured and handed over to ``addMemo()`` function."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:306
msgid "In this function, a Monaca Backend API of a collection called ``monaca.cloud.Collection().insert()`` is used to insert a new item into ``Memo`` collection."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:342
msgid "Updating a Memo"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:344
msgid "When you update a memo, ``monaca.cloud.Collection().findMine()`` function is used to find the memo to update. In this case, we already know the ``_id`` property of the collection item. Then, we call ``monaca.cloud.collectionItem.update()`` function to update this item in ``Memo`` collection."
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:394
msgid "Deleting a Memo"
msgstr ""

#: ../doc/sampleapp/samples/backend_memo.rst:396
msgid "Similar to updating a memo, the app calls ``monaca.cloud.Collection().findMine()`` function to get the collection item. Then, call ``monaca.cloud.collectionItem.delete()`` function to delete the memo."
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:5
msgid "Break the Bricks"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:10
msgid "This is a sample game based on :file:`pixi.js` which is a super fast HTML5 2D rendering engine that uses webGL with canvas fallback. For more information about Pixi, please refer to `here <https://github.com/GoodBoyDigital/pixi.js>`_. In the game, player controlls a paddle to prevent a ball from falling while trying to clear the bricks. The objective of the game is to clear all the bricks."
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:13
msgid "*Tested Environments:* Android 4.4, iOS 8.1.1"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:23
msgid ":download:`Click here to download the project <download/break_the_bricks.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:34
msgid "The Startup page (Home page)"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:36
#: ../doc/sampleapp/samples/flickr.rst:33
msgid "``js/main.js``"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:36
#: ../doc/sampleapp/samples/memo_application.rst:37
msgid "A JavaScript file handling various implementation in the application"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:38
msgid "Style Sheet for the whole application"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:40
msgid "``img/*.png``"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:40
#: ../doc/sampleapp/samples/clock.rst:40
msgid "All image files needed to use this template"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:42
msgid "``res/VT323-Regular.ttf``"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:42
msgid "A true type font"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:49
msgid "``Pixi``"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:54
msgid "Source Code Explanation"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:57
msgid "js/main.js"
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:59
msgid ":file:`main.js` is a JavaScript file handling various functionalities of the application."
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:61
msgid "Below is the code of ``BB`` object which is the main object of this application. Its properties are screensize, paddle, balls, blocks, score and so on. Its methods are creating block map (``setMap()``), creating a ball (``addBall()``), creating a paddle (``addPaddle()``), resetting the game after it ended (``reset()``), calculating the score (``addScore()``), ending the game (``endGame()``) and so on."
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:321
msgid "When this page is loading, ``init()`` function is called when Cordova is fully loaded or when it's failed to detect the type of the device."
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:333
msgid "Here is the code of ``init()`` function. In this function, BB object is rendered according to the type of device you are using. Then, events listeners related the paddle are added. Also, it renders the paddle position according to each event."
msgstr ""

#: ../doc/sampleapp/samples/break_the_bricks.rst:401
msgid "``getUa()`` function is used to detect the type of the device. It will return ``false`` when it failed to get this information."
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:5
msgid "Clock App"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:10
msgid "This sample application is reprinting of `Think IT article <http://thinkit.co.jp/story/2013/03/11/3987>`_ relaesed on 3/11/2013."
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:12
msgid "This sample app is a clock app displaying current Date and time."
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:24
msgid ":download:`Click here to download the project <download/clock.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:36
msgid "The JavaScript file handling implementation in the project"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:38
msgid "The style Sheet for the project"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:40
#: ../doc/sampleapp/samples/flickr.rst:35
#: ../doc/sampleapp/samples/omikuji.rst:33
msgid "``images/*.png``"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:48
#: ../doc/sampleapp/samples/hello_world.rst:59
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:50
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:51
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:53
#: ../doc/sampleapp/samples/sample_rss_reader.rst:65
#: ../doc/sampleapp/samples/sample_rss_reader.rst:76
#: ../doc/sampleapp/tips/media.rst:21
#: ../doc/sampleapp/tips/media.rst:57
msgid "index.html"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:50
msgid "The following HTML body of :file:`index.html` file is for displaying the current Date and time (see screenshot below):"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:79
msgid "js/app.js"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:81
msgid "When the application is loaded, the ``clock()`` function is called every 1 seconds (1000 ms) by this statement:"
msgstr ""

#: ../doc/sampleapp/samples/clock.rst:89
msgid "The ``clock()`` function is used to display the current date and time. First, it gets the current time (hour, minute and second) and then display the images (digit image) according to the time. Next, it gets the current date (day, month and year) and then display it in the format as defined in ``renderDay()`` and ``renderMonth()`` functions (see below screenshot). Here is content of the ``clock()`` function:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:5
msgid "Facebook Client"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:10
msgid "This sample app allows users to connect to Facebook from Monaca by using `Onsen UI <https://docs.monaca.io/en/onsenui/>`_ and InAppBrowser."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:13
#: ../doc/sampleapp/samples/twitter.rst:13
msgid "*Tested Environments:* Android 4.3, iOS 7.1.1"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:22
msgid ":download:`Click here to download the project <download/facebook.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:27
msgid "You are required to have *App ID/App Key* and *App Secret* by registering your Monaca app with Facebook Developer:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:29
msgid "Go to `Facebook Developer Site <https://developers.facebook.com/>`_. Signin with Facebook account. If you don't have one, please signup."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:31
msgid "Go to :guilabel:`Apps > Create a New App`."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:36
msgid "Fill in the display name and choose a category of your app. Then, click :guilabel:`Create App` button."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:41
msgid "For security purpose, you will be asked to input some code. Click :guilabel:`Submit` button after input the shown code properly."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:46
msgid "After a successful registration, a similar screen shown below will appear. You can see the App ID and App Secret here. You will need them later."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:61
#: ../doc/sampleapp/samples/ibeacon.rst:48
msgid "Startup Page (Consists of Connect Screen)"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:63
msgid "``home_navigator.html``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:63
msgid "Navigate to Connect Screen"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:65
msgid "``connect.html``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:65
msgid "Connect Screen"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:67
msgid "``profile.html``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:67
msgid "Facebook User Profile Screen"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:69
msgid "``list.html``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:69
msgid "Friends List Screen"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:71
#: ../doc/sampleapp/samples/ibeacon.rst:54
msgid "JavaScript file handling app interactions."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:73
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:36
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:36
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:38
msgid "``styles/app.css``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:73
#: ../doc/sampleapp/samples/ibeacon.rst:56
msgid "Stylesheet file for the application"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:81
#: ../doc/sampleapp/samples/ibeacon.rst:63
#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:43
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:44
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:45
msgid "``Onsen UI``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:88
#: ../doc/sampleapp/samples/sample_rss_reader.rst:57
#: ../doc/sampleapp/samples/twitter.rst:76
msgid "``InAppBrowser``"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:95
#: ../doc/sampleapp/samples/ibeacon.rst:78
msgid "The User Interface of this sample app is based on *Onsen UI*. For more information on *Onsen UI* tags and components, please refer to `Onsen UI Documentation <https://docs.monaca.io/en/onsenui/>`_."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:97
msgid "The following contents of the HTML body of :file:`index.html` file loads the :file:`home_navigator.html` file at startup:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:106
msgid "The following contents of the HTML body of :file:`home_navigator.html` file will direct to the :file:`connect.html` file which is the Connect Screen:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:115
msgid "The following contents of the HTML body of :file:`connect.html` file:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:127
msgid "corresponds to the screenshot below which allows a user to connect to Facebook:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:134
msgid "The following contents of the HTML body of :file:`profile.html` file:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:149
msgid "corresponds to the screenshot below which shows the user's basic info and profile picture if the authentication is successful. When the :guilabel:`Show Friend List` button is tapped, the :file:`list.html` page is shown:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:156
msgid "The following contents of the HTML body of :file:`list.html` file:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:171
msgid "corresponds to the screenshot below which shows the friends list of the authenticated user:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:181
msgid "The logic behind this app is based on *Graph API* and *InAppBrowser*. The `Graph API <https://developers.facebook.com/docs/reference/api/>`_ is the primary way that data is retrieved from Facebook or posted on Facebook. We use *InAppBrowser* to open a Facebook authentication page inside our app. This prevents opening of an external browser."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:183
msgid "The JavaScript codes of this sample app is based on AngularJS. In AngularJS, each page, which requires interactions, contains its own controller function. In this sample, we have 3 controller functions: :envvar:`Connect_Ctrl`, :envvar:`Profile_Ctrl` and :envvar:`List_Ctrl` correspond to :file:`connect.html` page, :file:`profile.html` page and :file:`list.html` page, respectively. In order to create global vairables used between these controller functions, you need to create a service function to store those global variables as follows:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:205
msgid "Inside this service function, we are able to get and set the value of the ``property`` variable which is a JSON object. This variale contains various variables needed to use between different pages."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:208
#: ../doc/sampleapp/samples/ibeacon.rst:248
msgid "Next, we will explain each controller function:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:211
msgid "Connect_Ctrl"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:213
msgid ":envvar:`Connect_Ctrl` controls the interactions and processes in :file:`connect.html` file. In other words, it handles the Facebook authentication process. In order to run this function, you will need to fill in your API Key, App Secret and a valid callback URL. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:292
msgid "Inside this controller, there is :envvar:`connect` function which leads user through Facebook authentication. This function is called when the :guilabel:`Connect` button is pressed. In order to gain access to Facebook, the :envvar:`Connect()` function needs to open a Facebook authentication page first (as shown below) via a *InAppBrowser* using :envvar:`window.open()` function."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:298
msgid "After the user inputs his/her login information and presses :guilabel:`Log in` button, the app redirects to your callback URL. From the callback URL, Facebook code can be found. Then, an ``HttpRequest`` is sent with several parameters including the newly found Facebook code to ``\"https://graph.facebook.com/oauth/access_token?...\"`` in order to get access token."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:300
msgid "If the request is successful, another ``HttpRequest`` is sent with several parameters including the newly found Facebook code to ``\"https://graph.facebook.com/me?...\"`` in order to get some information of the authenticated user, in this case, ``Name`` and ``Profile picture URL``."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:302
msgid "Next, if the request is successful, the retrieved info will then be stored in a JSON object (``info_obj``) for later use and another ``HttpRequest`` is sent with several parameters including the newly found Facebook code to ``\"https://graph.facebook.com/me/friends?...\"`` in order to get a list of friends of the authenticated user. If the request is successful, the retrieved data (in JSON format) of friends list will also be stored in the ``info_obj`` and updates into the global variable (``property``) inside ``sharedProperties`` service for using between controllers (pages)."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:304
msgid "Then, finally, the app redirects to :file:`profile.html` page."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:308
msgid "Profile_Ctrl"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:310
msgid ":envvar:`Profile_Ctrl` controls the interactions and processes in the :file:`profile.html` file. In other words, it displays the retrieved data after a successful authentication. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:323
msgid "This controller contains the assigment of some variables with the necessary data from the global variable inside the ``sharedProperties`` service."
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:326
msgid "List_Ctrl"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:328
msgid ":envvar:`List_Ctrl` controls the interactions and processes in the :file:`list.html` file. In other words, it displays the retrieved data of friends list of the authenticated user. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/facebook.rst:366
msgid "Inside this controller, there is :envvar:`get_list()` function which displays the list of friends retrieved from global variable (``property``) of the ``sharedProperties`` service."
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:5
msgid "Flickr Sample"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:10
msgid "This sample app shows how to retrieve pictures from Flickr and displays them as a slide show."
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:21
msgid ":download:`Click here to download the project <download/flickr.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:31
#: ../doc/sampleapp/samples/omikuji.rst:32
#: ../doc/sampleapp/samples/shinkansen.rst:31
msgid "The startup page"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:32
msgid "A stylesheet for the project"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:33
msgid "A JavaScript file for this project"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:34
msgid "``js/jquery.bxslider.js``"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:34
msgid "A Javascript file for photo sliding animation"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:35
msgid "Image files used in the project"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:49
msgid "The following HTML body of :file:`index.html` file is for the title bar, spinner and container for displaying the images (see screenshot below):"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:68
msgid "There are 2 main functions in this sample app which will be explained as follows:"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:71
msgid "jsonFlickrFeed()"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:73
msgid "``jsonFlickrFeed()`` is fired when the Flickr API is loaded. The Flickr API is called when the :file:`index.html` file is loaded. Inside the header of :file:`index.html` file, there is a line: ``<script src=\"http://api.flickr.com/services/feeds/photos_public.gne?format=json\" defer></script>``. This is where the Flickr API is called. In this function, the retrieved photos are then pushed into a local variable ``images`` and the photos are display as a slide show by calling ``displayPicture()`` function every *1 second*. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:94
msgid "displayPicture()"
msgstr ""

#: ../doc/sampleapp/samples/flickr.rst:96
msgid ":envvar:`displayPicture()` displays the photos stored inside ``images`` variable (photos retrieved from Flickr) in a container created by HTML code in :file:`index.html` file. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:5
msgid "Hello World App"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:10
msgid "This sample app is a Core Cordova Plugins Demo showing several device functionalities such as camera, contacts, compass and so on."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:23
msgid ":download:`Click here to download the project <download/hello_world.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:36
msgid "``phonegap-demo.html``"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:36
msgid "The Core Cordova Plugins Demo page"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:38
msgid "``phonegap-demo/master.css``"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:38
msgid "The style sheet for the Core Cordova Plugins Demo page"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:40
msgid "``phonegap-demo/main.js``"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:40
msgid "The JavaScript file handling implementation in the Core Cordova Plugins Demo page"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:42
msgid "The style Sheet for the whole application"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:44
msgid "``img/icon/*.png``"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:44
msgid "All icon files needed to use this template"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:61
#: ../doc/sampleapp/samples/sample_rss_reader.rst:67
msgid ":file:`index.html` is the Startup page."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:71
msgid "The above html code inside the ``<body>`` tag is showing a ``HelloWorld!`` phrase and a :guilabel:`Start Demo` button as shown below."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:79
msgid "phonegap-demo.html"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:81
msgid ":file:`phonegap-demo.html` shows a Core Cordova Plugins Demo with the basic phone information and a list of functions as below:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:83
msgid "*Toggle Accelerometer*: Start or stop the measurement of the phone's movement."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:84
msgid "*Get Location*: Get current location of the phone."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:85
msgid "*Call 411*: Call ``411``."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:86
msgid "*Vibrate*: Vibrate the phone."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:87
msgid "*Get a Picture*: Turn on the phone's camera."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:88
msgid "*Get Phone's Contacts*: Get the total number of contacts in the phone and display the third contact name."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:89
msgid "*Check Network*: Check the current type of network the phone is using."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:90
msgid "*Toggle Compass*: Start or stop the phone compass."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:96
msgid "The JavaScript code corresponds to these functions will be explained in the next section."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:101
msgid "The :file:`main.js` is a JavaScript file handling the implementation of the Core Cordova Plugins Demo page. There are 8 main functions in this file:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:104
msgid "Toggle Accelerometer"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:106
msgid "Start or stop the measurement of the phone's movement. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:140
msgid "When click on the :guilabel:`Toggle Accelerometer` button, you can either start or stop the measurement of the phone's movement. If it is started, the ``X``, ``Y`` & ``Z`` values change; otherwise, they will appear as ``0``."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:154
msgid "Get Location"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:156
msgid "Get current location of the phone. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:171
msgid "When click on the :guilabel:`Get Location` button, a message showing the current location of phone will appear as below:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:179
msgid "Call 411"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:181
msgid "Call ``411``. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:190
msgid "When click on the :guilabel:`Call 411` button, a confirmed message of the call is appeared."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:198
msgid "Vibrate"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:200
msgid "Vibrate the phone. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:210
msgid "When click on the :guilabel:`Vibrate` button, you will notice that your phone vibrates."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:214
msgid "Get a Picture"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:216
msgid "Turn on the phone's camera. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:242
msgid "When click on the :guilabel:`Get a Picture` button, the phone camera is turned on. If you take a picture and use it, it will be displayed in the page as shown below otherwise a message will be displayed (see below):"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:256
msgid "Get Phone's Contacts"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:257
msgid "Get the total number of contacts in the phone and display the third contact name. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:283
msgid "When click on the :guilabel:`Get Phone's Contacts` button, the total number of contacts in the phone and the third contact name will be displayed as follows:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:291
msgid "Check Network"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:293
msgid "Check the current type of network the phone is using. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:315
msgid "When click on the :guilabel:`Check Network` button, the current network type information will be displayed."
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:323
msgid "Toggle Compass"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:324
msgid "Start or stop the phone compass. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/hello_world.rst:350
msgid "When click on the :guilabel:`Toggle Compass` button, you can either start or stop the phone compass. If the compass is started, the value of the compass heading changes; otherwise, it will appear as ``off``. For example:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:5
msgid "iBeacon"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:10
msgid "(Last Updated: 2014/02/05)"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:12
msgid "This sample app uses iBeacon service to detect its proximity to iBeacon device. This Monaca app has `Onsen UI <https://docs.monaca.io/en/onsenui/>`_ as its UI. When the mobile (running this app) gets close enough to a predefined iBeacon device, a new page showing its UUID will be displayed."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:15
msgid "*Tested Environments:* Android 4.4, iOS 8.0.2"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:24
msgid "In order to test this application, you can either build the application or use the custom built Monaca Debugger."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:26
msgid ":download:`Click here to download the project <download/ibeacon.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:31
msgid "Download the iBeacon plugin from `here <https://github.com/petermetz/cordova-plugin-ibeacon.git>`_ and import it into Monaca Cloud IDE. See :ref:`import_cordova_plugin`."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:33
msgid "Find at least one iBeacon device."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:35
msgid "Get information of each iBeacon device by using its conresponded utility software. In our case, we use `My Beacon Tool <https://itunes.apple.com/jp/app/mybeacon-tool/id848908053?mt=8>`_."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:37
msgid "Take note of the UUID of each iBeacon device."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:50
msgid "``top_page.html``"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:50
msgid "Top page of the application"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:52
msgid "``info_page.html``"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:52
msgid "The page showing information of each iBeacon"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:70
msgid "`Proximity Beacon Plugin <https://github.com/petermetz/cordova-plugin-ibeacon.git>`_"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:71
msgid "``Bluetooth``"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:80
msgid "The following contents of the HTML body of :file:`index.html` file loads the :file:`top-page.html` file at startup:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:89
msgid "The following contents of the HTML body of :file:`top-page.html` file:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:114
msgid "corresponds to the screenshot below which allows a user to see a list of predefined iBeacon devices with its proximity:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:121
msgid "The following contents of the HTML body of :file:`info-page.html` file:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:149
msgid "corresponds to the screenshot below which shows the information (UUID) of the closest iBeacon device to the mobile."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:159
msgid "The JavaScript codes of this sample app is based on AngularJS. In AngularJS, each page, which requires interactions, contains its own controller function. In this sample, we have 2 controller functions: :envvar:`TopPageCtrl` and :envvar:`InfoPageCtrl` corresponded to :file:`top-page.html` page and :file:`info-page.html` page, respectively. In order to create global vairables used between these controller functions, we create a service function to store those global variables as follows:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:242
msgid "Inside this service function, we are able to:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:244
msgid "create an array of all predefined iBeacon devices' information (UUID, proximity, name, icon file and so on)."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:245
msgid "create a function to search for iBeacon devices nearby and retrieve the UUID of the closest iBeacon devices."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:251
msgid "TopPageCtrl"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:253
msgid ":envvar:`TopPageCtrl` controls the interactions and processes in :file:`top-page.html` file. In other words, it searching for nearby iBeacon devices. If the predefined iBeacon devices are in range, their proximity and rssi (received signal strength indicator) information will be updated. Otherwise, their proximity value will appear as ``ProximityUnknown`` and their rssi value will appear as ``-63 dBm`` (see below screenshot)."
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:260
#: ../doc/sampleapp/samples/ibeacon.rst:317
msgid "Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:312
msgid "InfoPageCtrl"
msgstr ""

#: ../doc/sampleapp/samples/ibeacon.rst:314
msgid ":envvar:`InfoPageCtrl` controls the interactions and processes in :file:`info-page.html` file. This controller simply displays the UUID of the closest iBeacon device by using the UUID value passing by the ``iBeaconService``. By \"closest\", we mean that the proximity of the iBeacon device is \"Immediate\". Otherwise, the :file:`info-page.html` will not displayed."
msgstr ""

#: ../doc/sampleapp/samples/index.rst:5
msgid "Sample Apps & Templates"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:5
msgid "Memo Application"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:10
msgid "This sample app allows user to create a memo application using local storage."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:23
msgid ":download:`Click here to download the project <download/memo_application.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:33
msgid "The Home screen"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:35
msgid "``js/memo.js``"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:35
msgid "A JavaScript file handling data manipulation in local storage"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:45
msgid "``jQuery Mobile``"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:52
msgid "This sample app's user interface is based on jQuery Mobile. In jQuery Mobile, multiple pages can be integrated to a single HTML file. In this app, for example, all pages (Top page, Add Memo page and Detail page) are defined within :file:`index.html`. Specifically, pages are expressed by ``div`` tags in which the ``data-role`` attribute is set to ``page``. The role of the tags is expressed by the ``data-role`` attribute in this manner. For example, ``data-role`` can also specify as ``header``, ``content`` , or ``listview``. For more information on jQuery Mobile tags and components, please refer to `jQuery Mobile Demo <http://demos.jquerymobile.com/>`_."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:55
#: ../doc/sampleapp/samples/memo_application.rst:81
msgid "The following content of the HTML body tag of ``index.html`` file:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:75
msgid "corresponds to this screenshot of the Top page (Home screen) which allows a user to add, view or delete memos:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:102
msgid "corresponds to this screenshot of the Add Memo page which allows a user to add/save a memo:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:108
msgid "The following content of the HTML body tag of :file:`index.html` file:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:126
msgid "corresponds to this screenshot of the Detail page which allows a user to see the full content of each memo:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:137
msgid "app.js"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:139
msgid ":file:`app.js` is a JavaScript file handling various implementation of the application."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:141
msgid "As soon as the application starts, the ``initTopPage()`` function is called. This function is used to initialize the Top page (Home screen). The initialization process is to get all the previously stored memo(s) (using the ``getMemoList()`` function which is defined in the :file:`memo.js` file) and put them into a list view. If there is no previously created memo (when using the application for the first time), ``\"No memo found\"`` will be displayed (see below screenshot)."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:147
#: ../doc/sampleapp/samples/memo_application.rst:200
#: ../doc/sampleapp/samples/memo_application.rst:221
msgid "Below is the source code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:176
msgid "On the Top page, when a user clicks on the :guilabel:`+Add` button, the Add Memo page will be shown. After filling in the Memo text box, the ``onSaveBtn()`` function is called when the :guilabel:`Save` button is clicked. In this function, the input text will be saved to local storage via the ``addMemo()`` function (defined in the :file:`memo.js` file) and then it goes back to the Top page with an updated list. Below is the source code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:194
msgid "On the Top page, when a user clicks on an item in the list, the ``onShowLink()`` function (defined in the :file:`memo.js` file) is called. In this function, the Detail page will be shown and either the title or the full content of the selected item will be displayed as shown below:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:215
msgid "On the Top page, a user can delete any item in the list by clicking on the :guilabel:`delete` icon at the end of each item. When the :guilabel:`delete` icon is clicked, the ``onDeleteLink()`` function is called. In this function, a message confirming the deleting action is shown (see below screenshot). If the :guilabel:`OK` button is clicked, the selected item will be deleted from the local storage via the ``deleteMemo()`` function (defined in the :file:`memo.js` file). Then, it will go back the Top page with an updated list."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:242
msgid "memo.js"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:244
msgid ":file:`memo.js` file is a JavaScript file handling data manipulation in local storage. Inside this file, there are 4 functions such as:"
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:246
msgid "``getMemoList()``: get the list of all memo stored in the local storage."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:247
msgid "``saveMemoList()``: save the list of all memo into the local storage."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:248
msgid "``AddMemo()``: add a new memo into the memo list and then save the new list into the local storage using ``saveMemoList()`` function."
msgstr ""

#: ../doc/sampleapp/samples/memo_application.rst:249
msgid "``deleteMemo()``: delete a specific memo from the memo list and then save the new list into the local storage using ``saveMemoList()`` function."
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:5
msgid "Minimum Template"
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:10
msgid "This is an empty template of a Monaca project."
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:23
msgid ":download:`Click here to download the project <download/minimum_project.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:28
msgid "When using the *Minimum Template*, the following files will be automatically created:"
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:36
msgid "The style sheet file for the project."
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:47
msgid "The above ``<meta>`` tag sets the display width to the actual width of the device screen. Some devices may display slight screen differences."
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:54
msgid "The above ``loader.js`` and ``loader.css`` files are used to load the necessary files and style sheets for the components included in the project."
msgstr ""

#: ../doc/sampleapp/samples/minimum_project.rst:57
msgid "The :file:`index.html` is the Startup page. Here is the screenshot of the Startup page:"
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:1
msgid "The first part of this JavaScript code as shown below is about initializing an *inmobi* object called ``inmobi_conf``. There are several properties of this object such as:"
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:3
msgid "``siteid`` (string): the property ID."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:4
msgid "``slot`` (number):  dimensions of the slot or box where ads appear on your app. The recommended slot value for most publishers is ``15``, which is a ``320x50`` slot that is compatible with rich media ads. For more information about other slot numbers, please refer to `Slot Sizes <https://support.inmobi.com/monetize/integration/mobile-web/mobile-web-integration-guide#integrating-the-ad-code>`_."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:5
msgid "``test`` (boolean): the state of your app. During development and testing, it should be set to true, to ensure that only test ads are sent. When you set test to false, you will receive live ads."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:6
msgid "``manual`` (boolean): if set to ``\"true\"``, the ad is not loaded automatically at page load. The ad can then be fetched at some other time in the life cycle of the page, using the :envvar:`getNewAd()` function."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:7
msgid "``autoRefresh`` (number): the duration of auto refresh of text and banner ads. The refresh interval is in seconds and its minimum accepted value is 20. In this sample, the ads is auto refreshed every minute."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:8
msgid "``targetWindow``: allows you this control whether to open a click URL/Landing Page in the same window or in a new window. To open click URLs in a new window, the parameter value must be set to ``\"_blank\"``. The default value is ``\"_top\"`` which opens the click URL in the same window."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:36
msgid "There are 2 functions in the JavaScript code of this app: :envvar:`onDeviceReady()`, and :envvar:`showAds()`."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:39
msgid "onDeviceReady() function"
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:41
msgid "The :envvar:`onDeviceReady()` includes :file:`inmobi.js` file when Core Cordova Plugins is fully loaded. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:60
msgid ":file:`inmobi.js` must not be included as usual in the header  by using (``<script type=\"text/javascript\" src=\"inmobi.js\"></script>``). This file is needed to be included after Core Cordova Plugins is fully loaded inside :envvar:`onDeviceReady()` function as shown above."
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:63
msgid "showAds() function"
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:65
msgid "The :envvar:`showAds()` function requests a new ads from the Inmobi. Below is the JavaScript code of this function:"
msgstr ""

#: ../doc/sampleapp/samples/old_inmobi.rst:78
msgid "For more information regarding *inmobi* JavaScript API, please refer to `this <http://developer.inmobi.com/wiki/index.php?title=JavaScript>`_."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:5
msgid "Omikuji Fortune Telling App"
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:10
msgid "Omikuji is a Japanese word means “random fortunes”. In Monaca, app development is done using HTML and JavaScript just like webpages. JavaScript is a scripting language with simple syntax and functions, and often used for smartphone development compared to other languages."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:22
msgid ":download:`Click here to download the project <download/omikuji.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:33
#: ../doc/sampleapp/samples/shinkansen.rst:33
msgid "Image files used in this application"
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:40
#: ../doc/sampleapp/samples/todo.rst:48
msgid "The contents of the HTML body section are shown below."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:48
msgid "There are two ``div`` tags spanning lines 1 through 4 and lines 5 through 7, with their IDs set to ``hako`` and ``bottombar`` , respectively. These IDs are referenced in the style sheet, which is discussed below."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:50
msgid "The ``div`` tag is used for grouping other tags. For example, the ``div`` tag with the ID ``hako`` contains img tags with the IDs ``saisyo`` and ``kekka`` .  ``img`` tag is used to display an image. These two tags display images for the omikuji box (displayed immediately after startup) and omikuji result, respectively."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:52
msgid "In order to display the image of the omikuji box when the app starts, the image is specified using the ``src`` attribute of the ``img`` tag with the ID ``saisyo``. In contrast, the ``kekka`` ``img`` tag has no ``src`` attribute. Instead, a ``style=\"display: none\"`` attribute has been provided. This is an example of how to include a style sheet definition (discussed below) in HTML, and this means that the image will not be displayed onscreen when the file is loaded. The fortune telling result image is set and displayed using the JavaScript program discussed below."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:54
msgid "Similarly, the ``div`` tag with the ID ``bottombar`` also contains an ``img`` tag.  In addition to the ``src`` attribute, an ``onclick`` attribute has also been provided.  The ``onclick`` attribute contains JavaScript code to be called when the image is clicked or tapped. In this example, when the fortune telling start button is tapped, the JavaScript ``omikuji()`` function is called.  The `omikuji()` function prepares the fortune telling results and displays them onscreen."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:57
msgid "Style Sheet Explanation"
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:59
msgid "The style sheet is included in the HTML ``head`` tag using the ``style`` tag. The style sheet code itself is shown below. There are three main groups of definitions: definitions for the ``body`` tag, definitions for the tag with the ID ``hako`` , and definitions for the tag with the ID ``bottombar`` ."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:67
msgid "The four properties (``background`` ,  ``margin`` , ``padding`` , and ``text-align``) are applied to set the styling for the ``body`` tag.  The ``background`` property is used to set the background image. In this example, the image :file:`images/omikuji-bg.png` will be enlarged to fill the ``body`` tag, i.e., the entire page.  The margin and padding properties are used to specify the page margins. Since they are both set to ``0`` in this example, there are no margins.  The ``text-align`` property is used to set text alignment. In this example, text is center aligned."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:69
msgid "As mentioned in the HTML explanation,  ``#hako`` identifies the ``div`` tag used to display the omikuji box and result images, and ``#bottombar`` identifies the ``div`` tag used to display the start button. These style sheet definitions make use of the ``position`` ,  ``bottom`` ,  ``top`` , and ``width``  properties.  When the ``position`` property is set to ``absolute`` , positioning is done using absolute coordinates. In this example, both divs will use coordinates relative to their parent tag, the ``body`` tag.  The ``bottom`` and ``top`` properties set the position from the bottom or top."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:71
msgid "This app refers to the external style sheet  :file:`components/loader.css`. It contains style sheet definitions used by libraries loaded by Monaca plugins. However, it has no significance here since this sample app does not make use of Monaca plugins included in the style sheets."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:77
#: ../doc/sampleapp/samples/todo.rst:64
msgid "The JavaScript code is shown below."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:86
msgid "Lines 1 through 16 contain the definition of the ``omikuji`` function. When the start button is tapped, this function will be executed. On line 2, the ``Math.floor`` and ``Math.random`` functions are combined to generate a random number from 0 to 3, which is assigned to the dice variable. On lines 4 through 11, the variable *image_name* is assigned an image file name according to the value of the ``dice`` variable."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:88
msgid "On lines 12 through 15, the ``document.getElementById`` function is used to modify the style sheet and replace images. This is referred to as DOM (Document Object Model) manipulation, and is used to dynamically update. In the following example, the ``src`` attribute of the element (HTML tag) with the ID ``kekka`` is modified."
msgstr ""

#: ../doc/sampleapp/samples/omikuji.rst:94
msgid "Since, as described above, the ``image_name`` variable is set to the name of the image file corresponding to the omikuji result, this technique can be used to display the image for the fortune telling result onscreen."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:5
msgid "Onsen UI Minimum Template"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:10
msgid "This is a minimum template for `Onsen UI <http://onsenui.io/>`_ application."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:23
msgid ":download:`Click here to download the project <download/onsen_ui_minimum_project.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:33
msgid "Home screen  (Startup page)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:34
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:34
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:34
msgid "``page1.html``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:34
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:34
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:34
msgid "Page 1"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:35
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:35
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:35
msgid "``page2.html``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:35
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:35
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:35
msgid "Page 2"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:36
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:36
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:38
msgid "Style sheet file of this project"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:52
msgid ":file:`index.html` is the Startup page. It contains the page navigation ``<ons-navigator>`` which is a page stack manager and transition animator. The attribute ``page=\"page1.html\"`` denotes that :file:`page1.html` is the first page of the stack, in other words, it is the first page loaded when the app start."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:54
msgid "Instead of using attibute ``page`` of ``<ons-navigator>``, you can also use <ons-page> component under <ons-navigator> to define the first page of the stack. In case of both options are used, the attribute ``page`` overwrites the ``<ons-page>`` component. In other words, the page from the ``page`` attribute is the first page of the stack while the ``<ons-page>`` component is ignored. For more information please refer to `Onsen UI Documentation <http://onsen.io/guide/overview.html#PageNavigation>`_."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:57
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:68
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:68
msgid "page1.html"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:59
msgid ":file:`page1.html` has a line of text (``Page 1``) and a :guilabel:`Push Page 2` button. (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:64
msgid "When the :guilabel:`Push Page 2` button is clicked, the Page 2 is shown horizontally with a :guilabel:`Welcome` back button on top-left of the page. In other words, the Page 2 is currently the second page in the page stack. When the :guilabel:`Welcome` back button is clicked, it goes back to the previous page which, in this case, is the Page 1."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:68
#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:77
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:92
msgid "page2.html"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_minimum_project.rst:70
#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:94
msgid ":file:`page2.html` has only a line of text (``Page 2``). (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:5
msgid "Onsen UI Sliding Menu"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:9
msgid "This is a template using `Onsen UI sliding menu <http://onsenui.io/guide/overview.html#UsingSlidingMenu>`_."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:22
msgid ":download:`Click here to download the project <download/onsen_ui_sliding_menu.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:32
msgid "Startup page"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:33
msgid "``menu.html``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:33
msgid "Menu Page"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:37
msgid "``images/ico_swipe_right_s.png``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:37
msgid "Image file used in this project"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:53
msgid ":file:`index.html` is the Startup page. It is the starting point of the app and contains the sliding menu component (``<ons-sliding-menu>`` tag). The ``ons-sliding-menu`` component has main page :file:`page1.html` and menu page :file:`menu.html`. When the :file:`index.html` is loaded at the start of the app, the :file:`page1.html` and :file:`menu.html` are loaded as the main page and menu page, respectively."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:56
msgid "menu.html"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:58
msgid ":file:`menu.html` is shown when the :guilabel:`Toggle Menu` button is clicked or when the user swipe the page right. This page contains a list of 2 items: Page 1 (``page1.html``) and Page 2 (``page2.html``). (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:64
msgid "While the behind-page (:file:`menu.html`) of the sliding menu element is always the same, its above-page is changed to :file:`navigator1.html` or :file:`navigator2.html` when the :guilabel:`Page 1` or :guilabel:`Page 2` is selected, respectively."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:70
msgid ":file:`page1.html` has several lines of text, a :guilabel:`Toggle Menu` button and an image file. (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_sliding_menu.rst:79
msgid ":file:`page2.html` has only a line of text (``Page 2``) and a :guilabel:`Toggle Menu` button. (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:5
msgid "Onsen UI Tabbar Navigation"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:10
msgid "This is a template using `Onsen UI tabbar <http://onsenui.io/guide/overview.html#UsingTabBar>`_ and `navigator <http://onsenui.io/guide/overview.html#PageNavigation>`_."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:22
msgid ":download:`Click here to download the project <download/onsen_ui_tabbar_navigator.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:32
msgid "Startup page (Home page)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:33
msgid "``navigator.html``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:33
msgid "Navigator page for Page 1"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:36
msgid "``page3.html``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:36
msgid "Page 3"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:37
msgid "``new_page.html``"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:37
msgid "New page"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:55
msgid ":file:`index.html` is the Startup page. It contains a ``<ons-tabbar>`` component which consists of 3 tabs: Home (:file:`navigator1.html`), Camera (:file:`page2.html`) and Settings (:file:`page3.html`) tabs. (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:62
msgid "navigator.html"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:64
msgid ":file:`navigator.html` stores a navigator element (``<ons-navigator>`` tag) which manages the page navigation backed by page stack, horizontally. As shown in the :file:`navigator.html` file, the :file:`page1.html` is used in a navigator element. In other words, the Page 1 is the first page in the page stack."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:70
msgid ":file:`page1.html` has a line of text (``Page 1``) and a :guilabel:`Push New Page` button. (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:77
msgid "When the :guilabel:`Push New Page` button is clicked, the New page is shown and pushed into the page stack. In other words, it's the second page in the page stack after the page 1."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:80
msgid "new_page.html"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:82
msgid ":file:`new_page.html` has a line of text (``New Page``) and a :guilabel:`Pop Page` button. (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:89
msgid "Either when the :guilabel:`Home` back button on the top-left corner of the New Page or the :guilabel:`Pop Page` button is clicked, it will go back to the previous page found in the page stack which, in this case, is the Page 1."
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:102
msgid "page3.html"
msgstr ""

#: ../doc/sampleapp/samples/onsen_ui_tabbar_navigator.rst:104
msgid ":file:`page3.html` has only a line of text (``Page 3``). (See the screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:5
msgid "RSS Reader Example"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:10
msgid "This is an RSS reader application using jQuery."
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:23
msgid ":download:`Click here to download the project <download/sample_rss_reader.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:33
msgid "The Startup page where RSS feeds will be loaded"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:35
msgid "``loading.gif``"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:35
msgid "A loading image file"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:37
msgid "``README.md``"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:37
msgid "A README file about this template"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:39
msgid "``js/feed-reader.js``"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:39
msgid "A JavaScript file for retrieving the RSS feeds"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:41
msgid "``js/phpjs_LICENSE.txt``"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:41
msgid "A license file (You can ignore this file.)"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:43
msgid "Style Sheet for the application"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:69
msgid "The HTML body of this file is simply a placeholder of a ``loading.gif``, the feed list and error message."
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:78
msgid "As soon as the application starts, the RSS feeds retrieval also begins. While loading the content of RSS feeds, :file:`loading.gif` file is displayed. The following JavaScript code is used to invoke the RSS feeds retrieval function. This function is defined in :file:`feed-reader.js` file which will be explained later in this page. You can try changing the RSS feeds URL."
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:94
msgid "feed-reader.js"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:96
msgid "When the RSS feeds retrieval function (``Feed.load()``) is called, the following JavaScript code is executed:"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:131
msgid "If the function is executed successfully, the retrieved RSS feeds are listed in the Home screen as shown in the screenshot below."
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:137
msgid "The following JavaScript code corresponds to the display arrangment of RSS feeds in the Home screen (:file:`index.html`):"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:154
msgid "The RSS feeds are displayed in a list view format. When click on each link of the feeds, it forwards to the corresponded URL in a ChildBrowser as shown below:"
msgstr ""

#: ../doc/sampleapp/samples/sample_rss_reader.rst:160
msgid "The following JavaScript code corresponds to the above function:"
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:5
msgid "Train Catalog"
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:10
msgid "This sample app is a train catalog which displaying the types trains towards Tokaido and Tohoku areas."
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:12
msgid "*Tested Environments:* Android 4.0, iOS 7.1.1"
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:21
msgid ":download:`Click here to download the project <download/shinkansen.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:32
msgid "The stylesheet file for the application"
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:33
msgid "``images/¥*¥*¥*.jpg``"
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:48
msgid "This sample uses the native function of Monaca. Therefore, there are multiple HTML pages. First, here is the body of the :file:`index.html`."
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:55
msgid "This sample uses jQuery Mobile to display the list screen. Once you tap each column, ``showDetail`` function is called. This function will transit to the next page, which will be described later. Also ``a`` tag uses ``monaca.invokeBrowser`` function in ``onclick`` attributes. This function is used to launch the browser and display the specified URL."
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:60
msgid "The JavaScript code of the Top Screen is not long."
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:67
msgid "As mentioned before, ``showDetail`` is called when the column in the list is tapped. Take 2 arguments and assign them to``filename`` variable and ``trqinname`` variable."
msgstr ""

#: ../doc/sampleapp/samples/shinkansen.rst:69
msgid "Display the next page with ``monaca.pushPage``  function. This function will open a new page natively by using Monaca native functions and the variable passed to the next page is defined in it's third argument. The passed value can be obtained by ``monaca.queryParams`` variable."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:5
msgid "TODO App"
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:10
msgid "The application allows you to add a todo list."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:22
msgid ":download:`Click here to download the project <download/todo.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:34
msgid "A JavaScript file used in the application"
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:55
msgid "Since this sample uses jQuery Mobile, the HTML should be written accordingly. Specifically, attributes beginning with *data-*, such as *data-role* and *data-position*, serve special roles in jQuery Mobile."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:57
msgid "In jQuery Mobile, multiple pages can be described in a single HTML file. In this app, for example, both the List Screen and the Add Screen are defined within :file:`index.html`. Specifically, pages are expressed by ``div``  tags in which the ``data-role`` attribute is set to ``page``. The role of the tags is expressed by the ``data-role`` attribute in this manner. For example, ``data-role`` can also specify ``header``, ``content`` , or ``listview``."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:59
msgid "For more information on jQuery Mobile tags and components, please refer to `jQuery Mobile Demo <http://jquerymobile.com/demos/1.2.0/>`_."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:71
msgid "Here, the two functions, ``addTodoPicture`` and ``addTodo``, are defined. As the names imply, the first function shoots a photo and registers data while the second performs only data registration."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:73
msgid "To shoot a photo, the *addTodoPicture* functions calls *navigator.camera.getPicture*,which is a function provide by Core Cordova Plugins. If the call is successful, the function *addTodo* is then executed. if it fails, an error message is generated. Photo shoot options such as fixing the image size and specifying the return type are also set."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:75
msgid "The function ``addTodo`` takes an argument called ``camera_url``. When the function ``navigator.camera.getPicture`` is called and the photo shoot is successful, a reference to the graphic file is stored in this argument."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:77
msgid "DOM operations can easily be performed within these functions through the use of jQuery libraries. For example, in the following snippet, the value of the element with ID ``todo-title`` is acquired and assigned to the variable ``title``."
msgstr ""

#: ../doc/sampleapp/samples/todo.rst:83
msgid "Accordingly, in lines 14-19, the input values are read and assigned to the appropriate variables ``title``, ``body``, and ``img_tag``. Next, the function *$.mobile.changePage* transitions to the next page and adds a new row to the list. Finally, the list page is redrawn and the program ends."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:5
msgid "Twitter Client"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:10
msgid "This sample app is showing the Twitter Timeline of a specifice user. It allows user to connect to Twitter from Monaca app by using `OAuth protocol <https://dev.twitter.com/docs/auth/oauth>`_ and InAppBrowser. If you want to use other APIs, please refer `Twitter Documentation <https://dev.twitter.com/docs>`_ ."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:22
msgid ":download:`Click here to download the project <download/twitter.zip>`"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:27
msgid "You are required to obtain *API key* and *API secret* by registering your Monaca app with Twitter Developer:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:29
msgid "Go to `Twitter Developer Site <https://dev.twitter.com/>`_. Signin with Twitter account. If you don't have one, please signup."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:31
msgid "Go to :guilabel:`My applications`. Then, click on :guilabel:`Create New App` button."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:36
msgid "Fill in the information of your app such as: Name, Description, Website and Callback URL. Tick :guilabel:`Yes, I agree`. Then, click :guilabel:`Create your Twitter application` button."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:38
msgid "Go to :guilabel:`Settings` tab and tick :guilabel:`Allow this application to be used to Sign in with Twitter`. (See screenshot below)"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:43
msgid "Go to :guilabel:`API Keys` tab and take note of the API key and API secret. You will need them later. You can also regenerate the API keys."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:58
msgid "The startup Page (Consists of Connect Screen)"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:59
msgid "``css/app.css``"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:60
msgid "``css/onsen-css-components-default.css``"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:60
msgid "A stylesheet file for `Onsen UI <http://onsenui.io/>`_ components"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:61
msgid "``js/jsoauth.js``"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:61
msgid "A JavaScript library implementing the `OAuth protocol <https://dev.twitter.com/docs/auth/oauth>`_ which aims to form the basis of custom clients such as Twitter. `See more about jsOAuth <https://github.com/bytespider/jsOAuth>`_"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:62
msgid "``js/underscore.js``"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:62
msgid "A JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects. `See more about this library <http://underscorejs.org/>`_"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:83
msgid "The User Interface for this sample app is based on *Onsen UI Components*. For more information on *Onsen UI* tags and components, please refer to `Onsen UI Documentation <https://docs.monaca.io/en/onsenui/>`_."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:85
msgid "The following contents of the HTML body of :file:`index.html` file is for the navigation bar of the application which has a Twitter icon on the left, Search icon on the right and entitled as ``\"Twitter Timeline\"`` (see screenshot below):"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:114
msgid "The following contents of the HTML body of :file:`index.html` file is for the :guilabel:`Connect to Twitter` button and a place to load the content of the Twitter timeline (see screenshot below):"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:157
msgid "The logic behind this app is based on *InAppBrowser* and *OAuth protocol*. We use InAppBrowser to open a Twitter authentication page inside our app. This prevents an opening of an external browser."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:159
msgid "The OAuth protocol is used to send authorized requests to Twitter API. It’s a secure way to interact with Twitter since users are not required to share their passwords with 3rd party applications. For more information about OAuth protocol, please refer to `this <https://dev.twitter.com/docs/auth/oauth>`_."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:161
msgid "We will explain the JavaScript code of this app as follows:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:164
msgid "Initialize Oauth Object"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:166
msgid "Before starting to use an Oauth object, you will need to initialize it first. In order to do that, you will need to have ``API Key``, ``API Secret`` and a valid callback URL. Here is how to initialize an Oauth object:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:186
msgid "connect() function"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:188
msgid "Here is the ``connect()`` function:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:203
msgid "This function is called when the user clicks on :guilabel:`Connect to Twitter` button. It is asking the user to login to Twitter by using InAppBrowswer. In other words, it is requesting for the authentication token by asking the user to authenticate through InAppBrowser via another function called ``showAuthWindow()``."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:206
msgid "showAuthWindow() function"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:208
msgid "Here is the ``showAuthWindow()`` function:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:228
msgid "In this function, a browser is open for Twitter user authentication (see screenshot below). If the authentication is success (i.e the callback URL is successfully loaded), the Access Token is stored inside the oauth object and ``getTwits()`` function is called. After that, the browser is closed."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:236
msgid "getTwits() function"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:238
msgid "Here is the ``getTwits()`` function:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:252
msgid "This function is used to get a specific user's timeline. First, it starts to hide the :guilabel:`Connect to Twitter` button. Then, using oauth API to fetch the user's timeline. After that, calling ``showTwits()`` function to load the content into the app."
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:255
msgid "showTwits() function"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:257
msgid "Here is the ``showTwits()`` function:"
msgstr ""

#: ../doc/sampleapp/samples/twitter.rst:270
msgid "This function is used to display the twit information. It uses ``underscore.js`` library for templating (see screenshot below)."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:3
msgid "Using Camera and Photo Album"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:8
msgid "This sample code is confirmed to work with Android 2.3.6, Android 3.2, Android 4.0.3 and iOS 7.0.4."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:10
msgid "You will need to use Cordova Camera API to access the camera of a device. In order to use Cordova API, you need to load :file:`components/loader.js` file. Please be sure to add the following lines in the HTML files."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:23
msgid "Cordova has two JavaScript \"Camera\" object APIs."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:26
#: ../doc/sampleapp/tips/storage.rst:67
#: ../doc/sampleapp/tips/storage.rst:80
msgid "Function"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:26
#: ../doc/sampleapp/tips/camera.rst:92
#: ../doc/sampleapp/tips/storage.rst:54
#: ../doc/sampleapp/tips/storage.rst:67
#: ../doc/sampleapp/tips/storage.rst:80
msgid "Description"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:29
msgid "getPicture"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:29
msgid "Captures an image with the Camera or displays images from the internal album."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:31
msgid "cleanUp"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:31
msgid "Cleans up temporary directory used by the Camera API."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:36
msgid "Take a Picture (Base64 Format)"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:44
msgid "``navigator.camera.getPicture()`` function is used to deal with Camera API. ``getPicture()`` function has 2 callback functions: ``onSuccess`` and ``onFail``. Also, it can be used to pass an option object to specify picture quality and return type."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:54
msgid "After capturing and saving a picture with the Camera, ``onSuccess`` callback (1st argument) will be called. Then, the callback function will receive the reference to the picture. In case of having error while using the Camera, ``onFail`` callback (2nd argument) will be called. ``option`` object will return *jpeg/png* encoded string by default. The example above returns a picture with ``quality`` as ``\"50\"``, ``destinationType`` as ``\"Camera.DestinationType.DATA_URL\"`` in a *Base64* format."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:58
msgid "Take a Picture (FILE_URI Format)"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:60
msgid "This is a sample to display a taken picture using an image tag."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:71
msgid "Obtain Pictures from a Device's Album"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:80
msgid "The 3rd argument of ``getPicture()`` function has ``\"sourceType: navigator.camera.PictureSourceType.SAVEDPHOTOALBUM\"`` which defines the picture source obtained from the device's album. This way, you can access the device's album."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:85
msgid "Camera API Options"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:87
msgid "``getPicture()`` function has the following options. You can adjust Camera API behavior by overriding the default values listed here. Please note that this is not fully documented. Please check :ref:`Camera <phone_gap_camera>` for more details."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:92
msgid "Option"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:92
#: ../doc/sampleapp/tips/storage.rst:54
msgid "Value"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:94
msgid "quality"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:94
msgid "``0`` to ``100``"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:94
msgid "Specify picture quality."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:96
#: ../doc/sampleapp/tips/camera.rst:98
msgid "destinationType"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:96
msgid "``Camera.DestinationType.DATA_URL``"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:96
msgid "Obtain a picture in BASE64 format."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:98
msgid "``Camera.DestinationType.FILE_URI``"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:98
msgid "Obtain a picture in File URI format."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:100
msgid "sourceType"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:100
msgid "Can be one of the following values:"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:102
msgid "``Camera.PictureSourceType.PHOTOLIBRARY``"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:103
msgid "``Camera.PictureSourceType.CAMERA``"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:104
msgid "``Camera.PictureSourceType.SAVEDPHOTOALBUM``"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:100
msgid "Corresponding description of each value:"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:102
msgid "Select pictures from the photo library."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:103
msgid "Take a picture from the device's camera."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:104
msgid "Select pictures from the album."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:107
msgid "allowEdit"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:107
#: ../doc/sampleapp/tips/camera.rst:115
#: ../doc/sampleapp/tips/camera.rst:117
msgid "true or false"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:107
msgid "Allow simple editing before returning the picture."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:109
msgid "encodingType"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:109
msgid "JPEG or PNG"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:109
msgid "Specify encoding format of the picture."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:111
msgid "targetWidth"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:111
#: ../doc/sampleapp/tips/camera.rst:113
msgid "Number"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:111
msgid "Scale the picture with a specific width (in pixels)."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:113
msgid "targetHeight"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:113
msgid "Scale the picture with a specific height (in pixels)."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:115
msgid "correctOrientation"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:115
msgid "Rotate the picture as taken."
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:117
msgid "saveToPhotoAlbum"
msgstr ""

#: ../doc/sampleapp/tips/camera.rst:117
msgid "Save the picture to the album after capturing."
msgstr ""

#: ../doc/sampleapp/tips/compass.rst:2
msgid "Using Compass"
msgstr ""

#: ../doc/sampleapp/tips/compass.rst:12
msgid "Use the following API to retrieve device orientation:"
msgstr ""

#: ../doc/sampleapp/tips/compass.rst:14
msgid "``navigator.compasss.watchHeading()``"
msgstr ""

#: ../doc/sampleapp/tips/compass.rst:16
msgid "This method has three arguments: onSuccess callback, onError callback and option object."
msgstr ""

#: ../doc/sampleapp/tips/compass.rst:18
msgid "When the compass retrieval is successful, onSuccess callback function will be called. The passed parameter will contain numeric value from 0 to 359 indicating device heading. Above example displays heading directly to the page by using innerHTML."
msgstr ""

#: ../doc/sampleapp/tips/compass.rst:20
msgid "The used variables and parameter names of *onSuccess*, *onError*, option, heading, etc can be chosen freely."
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:3
msgid "nend"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:7
msgid "*Attention to English speaking users*: Information on this page is aimed to users in Japan or using Japanese context. Please use `Google Translate <http://translate.google.com/#ja/en/>`_ to read this page in your language."
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:10
msgid "Monacaで開発したアプリには、WebView上に表示できるものであれば広告ネットワーク各社が提供している広告を掲載することができます。 Monacaの利用規約ではアプリ内広告の表示について特に規制・条件は設けておりませんので、利用に際しては広告ネットワーク各社の規約等を確認の上ご利用ください。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:14
msgid "Monacaアプリ上に掲載できる広告ネットワークサービスの例として、株式会社ファンコミュニケーションズ様提供の `nend <http://nend.net/>`_ とMonacaアプリへの広告掲載の方法を紹介します。なお、以下の手順は2013年5月現在のものです。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:16
msgid "nendへの掲載アプリ審査登録"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:18
msgid "`nendのサイト <http://nend.net/>`_ から、左上の「アプリ・サイト運営者様」→「今すぐ始める」と進み、メディアパートナーとして登録、サイト/アプリを登録申請します。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:25
msgid "nendの広告コードの取得"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:27
msgid "サイト/アプリの審査後、管理画面から「広告枠の管理」→「広告枠」で登録したサイト/アプリを表示します。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:34
msgid "サイト/アプリ名の下にある「広告コード」をクリックすると広告掲載用のコードが表示されますので、そのコードをコピーしておきます。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:42
msgid "Monacaアプリへの広告コードの埋め込み"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:44
msgid "nendの広告コードの例を下記に示します。(xxx...はダミーです。ここには実際のコードが埋め込まれます。)"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:46
msgid "広告コードはiOS用とAndroid用で異なります。 アプリがそれぞれのOS専用の場合は、上記コードをそのままアプリに埋め込んでもかまいせん。iOS/Androidアプリそれぞれに共通のソースコードとする場合は、 nend_params を設定している部分を、OS毎に切り替えるようにソースを記述する必要があります。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:85
msgid "問題なくアプリに組み込まれた場合、下記例のように広告が表示されます。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:92
msgid "Onsen UIアプリでのnend広告の表示"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:94
msgid "Onsen UIアプリではSPA (シングルページアプリケーション) というUI構造が採用されているため、通常のようにbodyタグ直下に広告を表示しようとしてもできないことがあります。これを回避するためにはDOM操作を行い、nendの広告をSPAのページ上に表示するコードを記述する必要があります。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:96
msgid "具体的には下記のように行います。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:99
msgid "A: (AngularJS1.xを用いる場合)"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:138
msgid "B: (AngularJSを用いない場合)"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:172
msgid "jQuery Mobileなどで1つのHTMLファイルに複数のページを定義している場合、広告を複数のページに表示することはできません。その場合は1ページ1HTMLファイルとして、画面を作成してください。"
msgstr ""

#: ../doc/sampleapp/tips/external_services/nend_ad.rst:175
msgid "ハイパフォーマンス版では、デバッガー、アプリ問わずWebViewの仕様のためnendの広告を表示することができませんので、ご注意ください。"
msgstr ""

#: ../doc/sampleapp/tips/gps.rst:2
#: ../doc/sampleapp/tips/gps.rst:11
msgid "Using Location (GPS)"
msgstr ""

#: ../doc/sampleapp/tips/gps.rst:13
msgid "``navigator.geolocation.getCurrentPosition()``"
msgstr ""

#: ../doc/sampleapp/tips/gps.rst:15
msgid "This method has three arguments: *onSuccess*, *onError*, and option object. When the call is successful, *onSuccess* callback (1st argument) will be called. An object containing various location sensor information (position object in this case) will be returned."
msgstr ""

#: ../doc/sampleapp/tips/gps.rst:17
msgid "This example will simply output position.coords.longitude and position.coords.latitude. The used variables and parameter names of *onSuccess*, *onError*, option, position, etc can be chosen freely."
msgstr ""

#: ../doc/sampleapp/tips/index.rst:3
msgid "Tips & Tricks"
msgstr ""

#: ../doc/sampleapp/tips/index.rst:5
msgid "Here are some tips for development."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:3
msgid "Playing Sound and Music"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:8
msgid "In Monaca, you can use the following ways to play sound and music:"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:10
#: ../doc/sampleapp/tips/media.rst:45
msgid "Use HTML5 <audio> tag."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:11
#: ../doc/sampleapp/tips/media.rst:46
msgid "Use Core Cordova Plugins Media API."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:13
msgid "This is just a sample code and may not work correctly with some OS versions or devices."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:16
msgid "Playing Sound from External Source"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:19
msgid "HTML5 <audio> tag can be used to play sound located in the Internet by specifying its URL. This sample uses <audio> tag and specifies an external mp3 source."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:37
msgid "Please be aware that some devices or OS versions do not support audio playback."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:40
msgid "Playing the Sound Located in Monaca Project"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:42
msgid "This sample plays a sound file located under *www* directory of the project. There are two ways to playback a local sound file."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:52
msgid "Using <audio> Tag and Locating Local Sound File"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:54
msgid "Most iOS devices are capable of playing local sound files by using <audio> tag. However, Android devices do not have this capability yet."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:75
msgid "Using Core Cordova Plugins Media API to Play Sound"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:78
msgid "This API can be used to play sound located locally. It is compatible with both iOS and Android devices. Following sample code loads and plays :file:`sample.mp3` file located in a Monaca project."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:85
#: ../doc/sampleapp/tips/media.rst:108
msgid "*index.html*"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:94
msgid "Using Media API to Play Sound Effects"
msgstr ""

#: ../doc/sampleapp/tips/media.rst:96
msgid "This sample modifies `Fortune Teller App <https://docs.monaca.io/en/sampleapp/samples/omikuji/>`_ and adds a sound effect to it. This sample app will have different sounds for each fortune result. You will need to place *mp3* files and modify :file:`index.html` as follows."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:103
msgid "You can download the complete source code here."
msgstr ""

#: ../doc/sampleapp/tips/media.rst:105
msgid ":download:`download/media/omikuji.zip`"
msgstr ""

#: ../doc/sampleapp/tips/phonegap.rst:3
msgid "Core Cordova Plugins app acceleration/UX Technique"
msgstr ""

#: ../doc/sampleapp/tips/phonegap.rst:9
msgid "HTML5, CSS3, and Javascript code written in the Monaca app will operate on WebView. In that case, how you design the page, and how you write the code will have a huge effect on the performance of the app. Please use this article for  `Japanese reference <http://blog.asial.co.jp/1142>`_ gives the following as the criterion to pass the screening by Apple."
msgstr ""

#: ../doc/sampleapp/tips/phonegap.rst:13
msgid "The article is written in relation to Core Cordova Plugins, but WebView operation is the same on both the Monaca app and the Core Cordova Plugins app, so you will be able to apply the techniques in the same way as written in the article."
msgstr ""

#: ../doc/sampleapp/tips/phonegap.rst:15
msgid "In addition, the following link contains an article, which has been translated by our staff, geared towards the Core Cordova Plugins app .  `English Article <http://www.tricedesigns.com/2013/03/11/performance-ux-considerations-for-successful-phonegap-apps/>`_ \""
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:3
msgid "Control the Splash Screen"
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:9
msgid "Splash screen is displayed while waiting for the :file:`index.html` page to load. You can manually hide the splash screen by using JavaScript code ``navigator.splashscreen.hide()`` or by setting in Monaca Cloud IDE."
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:11
msgid "Here are how to hide the splash screen manually in Monaca Cloud IDE:"
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:14
msgid "Settings for Android"
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:16
msgid "From Monaca Cloud IDE menu, go to :menuselection:`Config --> Android App Settings`."
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:18
msgid "Scroll to Splash Files. In order to hide the splash screen, you can set the display time to a very long (improbable) duration (in millisecond)."
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:20
#: ../doc/sampleapp/tips/splashScreen.rst:33
msgid "Then, save your settings."
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:27
msgid "Settings for iOS"
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:29
msgid "From Monaca Cloud IDE menu, go to :menuselection:`Config --> iOS App Settings`."
msgstr ""

#: ../doc/sampleapp/tips/splashScreen.rst:31
msgid "Scroll to Splash Screen. In order to hide the splash screen, you have two options here such as Hide Automatically and Hide by JavaScript. If you choose \"Hide by JavaScript\", you will need to use ``navigator.splashscreen.hide()`` function in your JavaScript file."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:3
msgid "Using Database"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:8
msgid "HTML5 Web SQL Database connects to the device database. This section describes Web SQL Database usage."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:11
msgid "Web SQL Database"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:13
msgid "You need to create a new Database object before accessing to it. *window.openDatabase* function creates a new SQLite database."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:22
msgid "Creating a Database (SQLite)"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:51
msgid "openDatabase Arguments"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:54
msgid "Arguments"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:56
msgid "database_name"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:56
msgid "Database name"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:56
#: ../doc/sampleapp/tips/storage.rst:57
#: ../doc/sampleapp/tips/storage.rst:58
msgid "String"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:57
msgid "database_version"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:57
msgid "Database version"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:58
msgid "database_displayname"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:58
msgid "Database display name"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:59
msgid "database_size"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:59
msgid "Database size (in bytes)"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:59
msgid "Integer number"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:64
msgid "Database Object Methods"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:69
msgid "transaction"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:69
msgid "Starts transaction."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:70
msgid "changeVersion"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:70
msgid "Checks version and updates schema if necessary."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:74
msgid "*executesql* function in SQLTransaction object is an actual method to execute SQL. You need to execute transaction function in Database object to get SQLTransaction object. When executing *executeSql* function in SQLTransaction object, the callback function is executed and *SQLResultSet* object is passed to it."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:77
msgid "SQLResultSet Object Properties"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:82
msgid "insertId"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:82
msgid "Returns row number when INSERT statement is successful."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:83
msgid "rowsAffected"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:83
msgid "Returns affected rows after sql execution."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:84
msgid "rows"
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:84
msgid "Returns *ResultSetRowList* object. It represents the results of the sql execution."
msgstr ""

#: ../doc/sampleapp/tips/storage.rst:91
msgid "Executing SQL (SQLite)"
msgstr ""

