.. _localkit_building_app:==================================Part 3: Building Monaca App==================================In this page, we will cover the two following topics:1. :ref:`localkit_building_for_ios`2. :ref:`localkit_building_for_android`For more information on how to build Monaca Apps for other platforms, please refer to :ref:`build_index`... _localkit_building_for_ios:Building a Monaca App for iOS==================================In this section, we will talk about how to create a Debug Build of your Monaca app for iOS which will be installed on a development device. For more information about other types of build, please refer to :ref:`types_of_build_ios`.*Prerequisite*1. You must enroll in `Apple Developer Program <https://developer.apple.com/programs/>`_.2. After enrolling in the program, you will be able to create the following items which are required to create a Debug build in Monaca:- ``App ID`` (see :ref:`How to Register App ID <register_appID>`)- ``Development Certificate`` (see :ref:`How to Generate Certificates <create_cer>`)- ``Development Provisioning Profile`` (see :ref:`How to Create Provisioning Profiles<register_provisioning>`)Step 1: Configuring iOS App Settings^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^1. From Monaca Localkit, select a project you want to build and go to :guilabel:`Build Settings`.  .. figure:: images/building_app/ios_7.png      :width: 700px      :align: left  .. rst-class:: clear2. Go to :guilabel:`iOS App`.3. Fill in the necessary information of your app:  - Application Name: a name representing your app publicly such as in the Market.  - App ID: a unique ID representing your app. It is recommended to use reverse-domain style (for example, mobi.monaca.appname) for App ID. Only alphanumeric characters and periods (at least one period must be used) are allowed. Each segment separated by a period should begin with an alphabetic character.  - Version Number: a number representing the version of your app which will be required when uploading (publishing process) your application via iTune Connect later. It needs 3 numbers separated by dots (for example, 1.10.2). Each number should be in [0-99].  - The remaining information is optional. In this page, you can also configure icon, splash screen and other configurations.    .. figure:: images/building_app/ios_1.png        :width: 700px        :align: left    .. rst-class:: clear  .. warning:: The App ID in Monaca Build Settings must be the same as the App ID you have registered in iOS Provisioning Portal. This App ID (in Monaca Build Settings) cannot contain an asterisk (``*``); otherwise, the build will fail.  4. After finishing the configurations, click :guilabel:`Save`.     Step 2: Configuring iOS Build Settings^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^1. From Monaca Localkit, select a project you want to build and go to :guilabel:`Build Settings`.  .. figure:: images/building_app/ios_7.png      :width: 700px      :align: left  .. rst-class:: clear2. Go to :guilabel:`iOS Build`.3. Click on :guilabel:`Generate Key and CSR...` button and fill in your Apple ID information (user name and email address). Then, click :guilabel:`Generate Key and CSR` button. You can also import an existing Private Key if you have one.  .. figure:: images/building_app/ios_2.png      :width: 400px      :align: left  .. rst-class:: clear4. Export the CSR file. It will be required to issue the certificates later in iOS Provisioning Portal.  .. figure:: images/building_app/ios_4.png      :width: 700px      :align: left  .. rst-class:: clear.. note:: If you import an existing private key, you need to use the certificates which are issued based on that imported private key. However, if you create a new private key and CRS file, you will need to use the new CRS file to issue new certificates. Step 3: Building the App^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^1. From Monaca Localkit, select a project you want to build and go to :guilabel:`Remote Build`.  .. figure:: images/building_app/ios_8.png      :width: 700px      :align: left  .. rst-class:: clear2. Select ``iOS`` platform.3. Select Debug Build and click :guilabel:`Next` button.  .. figure:: images/building_app/ios_5.png      :width: 500px      :align: left  .. rst-class:: clear4. Upload the development provisioning profile and click :guilabel:`Next` button.5. It may take several minutes for the build to complete. Please wait. The following screen will appear after the build is successfully completed.   .. figure:: images/building_app/ios_6.png      :width: 500px      :align: left  .. rst-class:: clearStep 4: Installing the Built App^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^1. Download the built app.2. Use iTunes to install the built app on your iOS device... _localkit_building_for_android:Building a Monaca App for Android=======================================In this section, we will talk about how to create a Debug Build of your Monaca app for Android. For more information about other types of build, please refer to :ref:`types_of_build_android`.Step 1: Configuring Android App Settings^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^1. From Monaca Localkit, select a project you want to build and go to :guilabel:`Build Settings`.  .. figure:: images/building_app/ios_7.png      :width: 700px      :align: left  .. rst-class:: clear2. Go to :guilabel:`Android App`.3. Fill in the necessary information of your app:  - Application Name: a name representing your app publicly such as in the Market.  - Package Name: a unique ID representing your app. It is recommended to use reverse-domain style (for example, mobi.monaca.appname) for App ID. Only alphanumeric characters and periods (at least one period must be used) are allowed. Each segment separated by a period should begin with an alphabetic character.  - Version Number: a number representing the version of your app. It needs 3 numbers separated by dots (for example, 1.10.2). Each number should be in [0-99].  - Use Different Package Name for Debug Build: if checked, the package name of the debug-built app and custom-built debugger are different. In other words, the package name of debug-built app will have ``.debug`` extension, and the one for project debugger will have ``.debugger`` extension. However, this option is disable by default because it made some plugins impossible to be debugged due to the fact that they are tied to exact package names (eg. in-app purchase).  - The remaining information is optional. In this page, you can also configure icon, splash screen and other configurations.    .. figure:: images/building_app/android_1.png        :width: 700px        :align: left    .. rst-class:: clear  4. After finishing the configurations, click :guilabel:`Save`.Step 2: Configuring Android KeyStore ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Android KeyStore is used for storing the keys (Alias) needed to sign a package. When a KeyStore is lost or it is overwritten by another KeyStore, it is impossible to re-sign the signed package with the same key. One KeyStore can contain multiple aliases, but only one alias is used for code-sign an application.In order to configure Android KeyStore in Monaca, please do as follows:1. From Monaca Localkit, select a project you want to build and go to :guilabel:`Build Settings`.  .. figure:: images/building_app/ios_7.png      :width: 700px      :align: left  .. rst-class:: clear2. Go to :guilabel:`Android Build`.3. Now, you will need to generate a new KeyStore if you haven't created one yet. The KeyStore can either be created or imported. In this tutorial, we assume that you need to create a new KeyStore. Therefore, click on :guilabel:`Clear and Generate New...` button. Then, the following screen will appear:  .. figure:: images/building_app/android_2.png      :width: 700px      :align: left  .. rst-class:: clear4. Fill in the necessary information related to the KeyStore such as:  - Alias: key information stored in the KeyStore which is used to sign an app package.  - Password: password for the Alias.  - KeyStore Password: password for the new KeyStore.  .. figure:: images/building_app/android_3.png      :width: 400px      :align: left  .. rst-class:: clear5. Then, click :guilabel:`Generate KeyStore and Alias` button.Step 3: Building the App^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^1. From Monaca Localkit, select a project you want to build and go to :guilabel:`Remote Build`.  .. figure:: images/building_app/ios_8.png      :width: 700px      :align: left  .. rst-class:: clear2. Select ``Android`` platform.3. Select Debug Build and click :guilabel:`Next` button.  .. figure:: images/building_app/android_4.png      :width: 500px      :align: left  .. rst-class:: clear4. It may take several minutes for the build to complete. Please wait. The following screen will appear after the build is successfully completed.   .. figure:: images/building_app/android_5.png      :width: 500px      :align: left  .. rst-class:: clearStep 4: Installing the Built App^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^There are several ways you can install the built app:1. :ref:`network_and`2. use QR Barcode3. download the built app directly to your computer4. send the URL to download the built app  to your email address (registered with Monaca)... seealso::  *See Also*:  - :ref:`localkit_starting_project`  - :ref:`localkit_testing_debugging`  - :ref:`localkit_publishing_app`